{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","toggle","bind","state","isOpen","this","setState","Navbar","NavbarBrand","Container","fluid","Row","xs","Col","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bcefd8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/class.css';\nimport {\n    Navbar,\n    NavbarBrand,\n    Container,\n    Row,\n    Col\n} from 'reactstrap';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n    render() {\n        return (\n            <div>\n\t\t\t <Navbar>\n             <NavbarBrand>Samuel Nache</NavbarBrand>\n             </Navbar>\n\n\t\t\t\n\n<Container fluid={true}>\n\n      <Row xs=\"1\">\n\t  <pre >\n\t  <Col className=\"yaml_directive\">Experience:</Col>\n\t  <Col> </Col>\n\t  <Col>  The Boeing Company:</Col>\n\t\t<Col>    Start: June 2014</Col>\n\t\t<Col>    End: Current</Col>\n\t\t<Col>    Title: Systems Integration and Design Specialist</Col>\n\t\t<Col>    Statement of Work Examples:</Col>\n\t\t<Col>      - Lead network automation and network</Col> \n\t\t<Col>        analytics integration and development teams</Col>\n\t\t<Col>      - Conduct research, gather requirements,</Col> \n\t\t<Col>        identify solutions and define strategies</Col>\n\t\t<Col>      - Integrate software development processes</Col> \n\t\t<Col>        and tooling into traditional network operations</Col>\n\t\t<Col> </Col>\n\t\t<Col> </Col>\n\t\t<Col>  SIUC Department of Public Safety:</Col>\n\t\t<Col>    Start: May 2012</Col>\n\t\t<Col>    End: May 2014</Col>\n\t\t<Col>    Title: Technical Student Worker</Col>\n\t\t<Col>    Statement of Work Examples:</Col>\n\t\t<Col>      - Local area network administrator managing</Col> \n\t\t<Col>        70 user accounts in a secure environment</Col>\n\t\t<Col>      - Assist law enforcement personnel with</Col>\n\t\t<Col>        “in-house” and “on the street” technical issues</Col>\n\t\t<Col>      - Translate technical statuses for</Col> \n\t\t<Col>        investigations personnel</Col>\n\t\t<Col> </Col>\n\t\t<Col> </Col>\n\t\t<Col>  United States Navy:</Col>\n\t\t<Col>    Start: March 2006</Col>\n\t\t<Col>    End: March 2010</Col>\n\t\t<Col>    Title: Information Systems Technician</Col>\n\t\t<Col>    Statement of Work Examples:</Col>\n\t\t<Col>      - Local area network administrator managing</Col> \n\t\t<Col>        245 user accounts</Col>\n\t\t<Col>      - Serve as the primary technician for</Col> \n\t\t<Col>        specialized Linux systems</Col>\n\t\t<Col>      - Directly responsible for junior personnel</Col>\n\t\t<Col> </Col>\n\t\t<Col> </Col>\n\t\t<Col className=\"yaml_directive\">Education:</Col>\n\t\t<Col> </Col>\n\t\t<Col>  Master of Science:</Col>\n        <Col>    From: Boston University</Col>\n\t\t<Col>    Program: Computer Information Systems</Col>\n\t\t<Col>    GPA: 3.7 on a 4.0 Scale</Col>\n\t\t<Col>    Completed: True</Col>\n\t\t<Col> </Col>\n\t\t<Col>  Bachelor of Science:</Col>\n\t\t<Col>    From: Southern Illinois University Carbondale</Col>\n\t\t<Col>    Program: Information Systems Technologies</Col>\n\t\t<Col>    GPA: 4.0 on a 4.0 Scale</Col>\n\t\t<Col>    Completed: True</Col>\n\t\t<Col> </Col>\n\t\t<Col className=\"yaml_directive\">Certifications:</Col>\n\t\t<Col> </Col>\n\t\t<Col>  - Cisco Certified Entry Networking Technician</Col>\n\t\t<Col>  - Cisco Certified Network Associate</Col>\n\t\t<Col> </Col>\n\t\t<Col className=\"yaml_directive\">Hobbies:</Col>\n\t\t<Col> </Col>\n\t\t<Col>  - Electronics (Soldering, Circuit Creation)</Col>\n\t\t<Col>  - Music (Roland, Moog, Ableton)</Col>\n\t\t<Col>  - Certification Self-Study</Col>\n\t\t<Col> </Col>\n\t\t<Col className=\"yaml_directive\">Notes: |</Col>\n\t\t<Col>  Full resume provided upon request</Col>\n\t\t<Col>  s.jacob.nache@gmail.com</Col>\n\t  </pre>\n      </Row>\n\n\t  </Container>\n\t\t\t \t  </div>\n\t  \n\t\t\t);\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}